<?xml version="1.0"?>
<doc>
    <assembly>
        <name>linq2db.EntityFrameworkCore</name>
    </assembly>
    <members>
        <member name="T:LinqToDB.EntityFrameworkCore.EFConnectionInfo">
            <summary>
            Contains database connectivity information, extracted from EF.Core.
            </summary>
        </member>
        <member name="P:LinqToDB.EntityFrameworkCore.EFConnectionInfo.Connection">
            <summary>
            Gets or sets database connection instance.
            </summary>
        </member>
        <member name="P:LinqToDB.EntityFrameworkCore.EFConnectionInfo.ConnectionString">
            <summary>
            Gets or sets database connection string.
            </summary>
        </member>
        <member name="T:LinqToDB.EntityFrameworkCore.EFCoreMetadataReader">
            <summary>
            LINQ To DB metadata reader for EF.Core model.
            </summary>
        </member>
        <member name="T:LinqToDB.EntityFrameworkCore.EFProviderInfo">
            <summary>
            Required integration information about underlying database provider, extracted from EF.Core.
            </summary>
        </member>
        <member name="P:LinqToDB.EntityFrameworkCore.EFProviderInfo.Connection">
            <summary>
            Gets or sets database connection instance.
            </summary>
        </member>
        <member name="P:LinqToDB.EntityFrameworkCore.EFProviderInfo.Context">
            <summary>
            Gets or sets EF.Core context instance.
            </summary>
        </member>
        <member name="P:LinqToDB.EntityFrameworkCore.EFProviderInfo.Options">
            <summary>
            Gets or sets EF.Core context options instance.
            </summary>
        </member>
        <member name="T:LinqToDB.EntityFrameworkCore.ILinqToDBForEFTools">
            <summary>
            Interface for EF.Core - LINQ To DB integration bridge.
            </summary>
        </member>
        <member name="M:LinqToDB.EntityFrameworkCore.ILinqToDBForEFTools.ClearCaches">
            <summary>
            Clears internal caches
            </summary>
        </member>
        <member name="M:LinqToDB.EntityFrameworkCore.ILinqToDBForEFTools.GetDataProvider(LinqToDB.EntityFrameworkCore.EFProviderInfo,LinqToDB.EntityFrameworkCore.EFConnectionInfo)">
            <summary>
            Returns LINQ To DB provider, based on provider data from EF.Core.
            </summary>
            <param name="providerInfo">Provider information, extracted from EF.Core.</param>
            <param name="connectionInfo">Database connection information.</param>
            <returns>LINQ TO DB provider instance.</returns>
        </member>
        <member name="M:LinqToDB.EntityFrameworkCore.ILinqToDBForEFTools.CreateMetadataReader(Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Query.RelationalSqlTranslatingExpressionVisitorDependencies,Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource)">
            <summary>
            Creates metadata provider for specified EF.Core data model.
            </summary>
            <param name="model">EF.Core data model.</param>
            <param name="dependencies"></param>
            <param name="mappingSource"></param>
            <returns>LINQ To DB metadata provider for specified EF.Core model. Can return <c>null</c>.</returns>
        </member>
        <member name="M:LinqToDB.EntityFrameworkCore.ILinqToDBForEFTools.GetMappingSchema(Microsoft.EntityFrameworkCore.Metadata.IModel,LinqToDB.Metadata.IMetadataReader)">
            <summary>
            Creates mapping schema using provided EF.Core data model and metadata provider.
            </summary>
            <param name="model">EF.Core data model.</param>
            <param name="metadataReader">Additional optional LINQ To DB database metadata provider.</param>
            <returns>Mapping schema for provided EF.Core model.</returns>
        </member>
        <member name="M:LinqToDB.EntityFrameworkCore.ILinqToDBForEFTools.GetContextOptions(Microsoft.EntityFrameworkCore.DbContext)">
            <summary>
            Returns EF.Core <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions"/> for specific <see cref="T:Microsoft.EntityFrameworkCore.DbContext"/> instance.
            </summary>
            <param name="context">EF.Core <see cref="T:Microsoft.EntityFrameworkCore.DbContext"/> instance.</param>
            <returns><see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions"/> instance.</returns>
        </member>
        <member name="M:LinqToDB.EntityFrameworkCore.ILinqToDBForEFTools.TransformExpression(System.Linq.Expressions.Expression,LinqToDB.IDataContext,Microsoft.EntityFrameworkCore.Metadata.IModel)">
            <summary>
            Transforms EF.Core expression tree to LINQ To DB expression.
            </summary>
            <param name="expression">EF.Core expression tree.</param>
            <param name="dc">LINQ To DB <see cref="T:LinqToDB.IDataContext"/> instance.</param>
            <param name="model">EF.Core data model instance.</param>
            <returns>Transformed expression.</returns>
        </member>
        <member name="M:LinqToDB.EntityFrameworkCore.ILinqToDBForEFTools.GetCurrentContext(System.Linq.IQueryable)">
            <summary>
            Extracts <see cref="T:Microsoft.EntityFrameworkCore.DbContext"/> instance from <see cref="T:System.Linq.IQueryable"/> object.
            </summary>
            <param name="query">EF.Core query.</param>
            <returns>Current <see cref="T:Microsoft.EntityFrameworkCore.DbContext"/> instance.</returns>
        </member>
        <member name="M:LinqToDB.EntityFrameworkCore.ILinqToDBForEFTools.ExtractConnectionInfo(Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions)">
            <summary>
            Extracts EF.Core connection information object from <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions"/>.
            </summary>
            <param name="options"><see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions"/> instance.</param>
            <returns>EF.Core connection data.</returns>
        </member>
        <member name="M:LinqToDB.EntityFrameworkCore.ILinqToDBForEFTools.ExtractModel(Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions)">
            <summary>
            Extracts EF.Core data model instance from <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions"/>.
            </summary>
            <param name="options"><see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions"/> instance.</param>
            <returns>EF.Core data model instance.</returns>
        </member>
        <member name="M:LinqToDB.EntityFrameworkCore.ILinqToDBForEFTools.CreateLogger(Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions)">
            <summary>
            Creates logger used for logging Linq To DB connection calls.
            </summary>
            <param name="options"><see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions"/> instance.</param>
            <returns>Logger instance.</returns>
        </member>
        <member name="M:LinqToDB.EntityFrameworkCore.ILinqToDBForEFTools.LogConnectionTrace(LinqToDB.Data.TraceInfo,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Logs DataConnection information.
            </summary>
            <param name="info"></param>
            <param name="logger"></param>
        </member>
        <member name="T:LinqToDB.EntityFrameworkCore.Internal.LinqToDBForEFQueryProvider`1">
            <summary>
                Adapter for <see cref="T:Microsoft.EntityFrameworkCore.Query.Internal.IAsyncQueryProvider" />
            	This is internal API and is not intended for use by Linq To DB applications.
            	It may change or be removed without further notice.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:LinqToDB.EntityFrameworkCore.LinqToDBExtensionsAdapter">
            <summary>
            LINQ To DB async extensions adapter to call EF.Core functionality instead of default implementation.
            </summary>
        </member>
        <member name="M:LinqToDB.EntityFrameworkCore.LinqToDBForEFExtensions.ForEachAsyncLinqToDB``1(System.Linq.IQueryable{``0},System.Action{``0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously apply provided action to each element in source sequence.
            Sequence elements processed sequentially.
            </summary>
            <typeparam name="TSource">Source sequence element type.</typeparam>
            <param name="source">Source sequence.</param>
            <param name="action">Action to apply to each sequence element.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Asynchronous operation completion task.</returns>
        </member>
        <member name="M:LinqToDB.EntityFrameworkCore.LinqToDBForEFExtensions.ToListAsyncLinqToDB``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously loads data from query to a list.
            </summary>
            <typeparam name="TSource">Query element type.</typeparam>
            <param name="source">Source query.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>List with query results.</returns>
        </member>
        <member name="M:LinqToDB.EntityFrameworkCore.LinqToDBForEFExtensions.ToArrayAsyncLinqToDB``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously loads data from query to an array.
            </summary>
            <typeparam name="TSource">Query element type.</typeparam>
            <param name="source">Source query.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Array with query results.</returns>
        </member>
        <member name="M:LinqToDB.EntityFrameworkCore.LinqToDBForEFExtensions.ToDictionaryAsyncLinqToDB``2(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Threading.CancellationToken)">
            <summary>
            Asynchronously loads data from query to a dictionary.
            </summary>
            <typeparam name="TSource">Query element type.</typeparam>
            <typeparam name="TKey">Dictionary key type.</typeparam>
            <param name="source">Source query.</param>
            <param name="keySelector">Source element key selector.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Dictionary with query results.</returns>
        </member>
        <member name="M:LinqToDB.EntityFrameworkCore.LinqToDBForEFExtensions.ToDictionaryAsyncLinqToDB``3(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Threading.CancellationToken)">
            <summary>
            Asynchronously loads data from query to a dictionary.
            </summary>
            <typeparam name="TSource">Query element type.</typeparam>
            <typeparam name="TKey">Dictionary key type.</typeparam>
            <typeparam name="TElement">Dictionary element type.</typeparam>
            <param name="source">Source query.</param>
            <param name="keySelector">Source element key selector.</param>
            <param name="elementSelector">Dictionary element selector.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Dictionary with query results.</returns>
        </member>
        <member name="M:LinqToDB.EntityFrameworkCore.LinqToDBForEFExtensions.ToDictionaryAsyncLinqToDB``3(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)">
            <summary>
            Asynchronously loads data from query to a dictionary.
            </summary>
            <typeparam name="TSource">Query element type.</typeparam>
            <typeparam name="TKey">Dictionary key type.</typeparam>
            <typeparam name="TElement">Dictionary element type.</typeparam>
            <param name="source">Source query.</param>
            <param name="keySelector">Source element key selector.</param>
            <param name="elementSelector">Dictionary element selector.</param>
            <param name="comparer">Dictionary key comparer.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Dictionary with query results.</returns>
        </member>
        <member name="M:LinqToDB.EntityFrameworkCore.LinqToDBForEFExtensions.FirstAsyncLinqToDB``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously loads first record from query.
            Throws exception, if query doesn't return any records.
            </summary>
            <typeparam name="TSource">Query element type.</typeparam>
            <param name="source">Source query.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>First record from query results.</returns>
        </member>
        <member name="M:LinqToDB.EntityFrameworkCore.LinqToDBForEFExtensions.FirstAsyncLinqToDB``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously loads first record from query, filtered using provided predicate.
            Throws exception, if query doesn't return any records.
            </summary>
            <typeparam name="TSource">Query element type.</typeparam>
            <param name="source">Source query.</param>
            <param name="predicate">Query filter predicate.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>First record from query results.</returns>
        </member>
        <member name="M:LinqToDB.EntityFrameworkCore.LinqToDBForEFExtensions.FirstOrDefaultAsyncLinqToDB``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously loads first record from query.
            Returns <c>default(TSource)</c>, if query doesn't return any records.
            </summary>
            <typeparam name="TSource">Query element type.</typeparam>
            <param name="source">Source query.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>First record from query results or <c>default(TSource)</c> for empty resultset.</returns>
        </member>
        <member name="M:LinqToDB.EntityFrameworkCore.LinqToDBForEFExtensions.FirstOrDefaultAsyncLinqToDB``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously loads first record from query, filtered using provided predicate.
            Returns <c>default(TSource)</c>, if query doesn't return any records.
            </summary>
            <typeparam name="TSource">Query element type.</typeparam>
            <param name="source">Source query.</param>
            <param name="predicate">Query filter predicate.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>First record from query results or <c>default(TSource)</c> for empty resultset.</returns>
        </member>
        <member name="M:LinqToDB.EntityFrameworkCore.LinqToDBForEFExtensions.SingleAsyncLinqToDB``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously loads first record from query.
            Throws exception, if query doesn't return exactly one record.
            </summary>
            <typeparam name="TSource">Query element type.</typeparam>
            <param name="source">Source query.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>First record from query results.</returns>
        </member>
        <member name="M:LinqToDB.EntityFrameworkCore.LinqToDBForEFExtensions.SingleAsyncLinqToDB``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously loads first record from query, filtered using provided predicate.
            Throws exception, if query doesn't return exactly one record.
            </summary>
            <typeparam name="TSource">Query element type.</typeparam>
            <param name="source">Source query.</param>
            <param name="predicate">Query filter predicate.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>First record from query results.</returns>
        </member>
        <member name="M:LinqToDB.EntityFrameworkCore.LinqToDBForEFExtensions.SingleOrDefaultAsyncLinqToDB``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously loads first record from query.
            Returns <c>default(TSource)</c>, if query doesn't return any records.
            Throws exception, if query returns more than one record.
            </summary>
            <typeparam name="TSource">Query element type.</typeparam>
            <param name="source">Source query.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>First record from query results or <c>default(TSource)</c> for empty resultset.</returns>
        </member>
        <member name="M:LinqToDB.EntityFrameworkCore.LinqToDBForEFExtensions.SingleOrDefaultAsyncLinqToDB``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously loads first record from query, filtered using provided predicate.
            Returns <c>default(TSource)</c>, if query doesn't return any records.
            Throws exception, if query returns more than one record.
            </summary>
            <typeparam name="TSource">Query element type.</typeparam>
            <param name="source">Source query.</param>
            <param name="predicate">Query filter predicate.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>First record from query results or <c>default(TSource)</c> for empty resultset.</returns>
        </member>
        <member name="M:LinqToDB.EntityFrameworkCore.EFForEFExtensions.ForEachAsyncEF``1(System.Linq.IQueryable{``0},System.Action{``0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously apply provided action to each element in source sequence.
            Sequence elements processed sequentially.
            </summary>
            <typeparam name="TSource">Source sequence element type.</typeparam>
            <param name="source">Source sequence.</param>
            <param name="action">Action to apply to each sequence element.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Asynchronous operation completion task.</returns>
        </member>
        <member name="M:LinqToDB.EntityFrameworkCore.EFForEFExtensions.ToListAsyncEF``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously loads data from query to a list.
            </summary>
            <typeparam name="TSource">Query element type.</typeparam>
            <param name="source">Source query.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>List with query results.</returns>
        </member>
        <member name="M:LinqToDB.EntityFrameworkCore.EFForEFExtensions.ToArrayAsyncEF``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously loads data from query to an array.
            </summary>
            <typeparam name="TSource">Query element type.</typeparam>
            <param name="source">Source query.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Array with query results.</returns>
        </member>
        <member name="M:LinqToDB.EntityFrameworkCore.EFForEFExtensions.ToDictionaryAsyncEF``2(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Threading.CancellationToken)">
            <summary>
            Asynchronously loads data from query to a dictionary.
            </summary>
            <typeparam name="TSource">Query element type.</typeparam>
            <typeparam name="TKey">Dictionary key type.</typeparam>
            <param name="source">Source query.</param>
            <param name="keySelector">Source element key selector.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Dictionary with query results.</returns>
        </member>
        <member name="M:LinqToDB.EntityFrameworkCore.EFForEFExtensions.ToDictionaryAsyncEF``3(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Threading.CancellationToken)">
            <summary>
            Asynchronously loads data from query to a dictionary.
            </summary>
            <typeparam name="TSource">Query element type.</typeparam>
            <typeparam name="TKey">Dictionary key type.</typeparam>
            <typeparam name="TElement">Dictionary element type.</typeparam>
            <param name="source">Source query.</param>
            <param name="keySelector">Source element key selector.</param>
            <param name="elementSelector">Dictionary element selector.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Dictionary with query results.</returns>
        </member>
        <member name="M:LinqToDB.EntityFrameworkCore.EFForEFExtensions.ToDictionaryAsyncEF``3(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)">
            <summary>
            Asynchronously loads data from query to a dictionary.
            </summary>
            <typeparam name="TSource">Query element type.</typeparam>
            <typeparam name="TKey">Dictionary key type.</typeparam>
            <typeparam name="TElement">Dictionary element type.</typeparam>
            <param name="source">Source query.</param>
            <param name="keySelector">Source element key selector.</param>
            <param name="elementSelector">Dictionary element selector.</param>
            <param name="comparer">Dictionary key comparer.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Dictionary with query results.</returns>
        </member>
        <member name="M:LinqToDB.EntityFrameworkCore.EFForEFExtensions.FirstAsyncEF``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously loads first record from query.
            Throws exception, if query doesn't return any records.
            </summary>
            <typeparam name="TSource">Query element type.</typeparam>
            <param name="source">Source query.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>First record from query results.</returns>
        </member>
        <member name="M:LinqToDB.EntityFrameworkCore.EFForEFExtensions.FirstAsyncEF``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously loads first record from query, filtered using provided predicate.
            Throws exception, if query doesn't return any records.
            </summary>
            <typeparam name="TSource">Query element type.</typeparam>
            <param name="source">Source query.</param>
            <param name="predicate">Query filter predicate.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>First record from query results.</returns>
        </member>
        <member name="M:LinqToDB.EntityFrameworkCore.EFForEFExtensions.FirstOrDefaultAsyncEF``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously loads first record from query.
            Returns <c>default(TSource)</c>, if query doesn't return any records.
            </summary>
            <typeparam name="TSource">Query element type.</typeparam>
            <param name="source">Source query.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>First record from query results or <c>default(TSource)</c> for empty resultset.</returns>
        </member>
        <member name="M:LinqToDB.EntityFrameworkCore.EFForEFExtensions.FirstOrDefaultAsyncEF``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously loads first record from query, filtered using provided predicate.
            Returns <c>default(TSource)</c>, if query doesn't return any records.
            </summary>
            <typeparam name="TSource">Query element type.</typeparam>
            <param name="source">Source query.</param>
            <param name="predicate">Query filter predicate.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>First record from query results or <c>default(TSource)</c> for empty resultset.</returns>
        </member>
        <member name="M:LinqToDB.EntityFrameworkCore.EFForEFExtensions.SingleAsyncEF``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously loads first record from query.
            Throws exception, if query doesn't return exactly one record.
            </summary>
            <typeparam name="TSource">Query element type.</typeparam>
            <param name="source">Source query.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>First record from query results.</returns>
        </member>
        <member name="M:LinqToDB.EntityFrameworkCore.EFForEFExtensions.SingleAsyncEF``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously loads first record from query, filtered using provided predicate.
            Throws exception, if query doesn't return exactly one record.
            </summary>
            <typeparam name="TSource">Query element type.</typeparam>
            <param name="source">Source query.</param>
            <param name="predicate">Query filter predicate.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>First record from query results.</returns>
        </member>
        <member name="M:LinqToDB.EntityFrameworkCore.EFForEFExtensions.SingleOrDefaultAsyncEF``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously loads first record from query.
            Returns <c>default(TSource)</c>, if query doesn't return any records.
            Throws exception, if query returns more than one record.
            </summary>
            <typeparam name="TSource">Query element type.</typeparam>
            <param name="source">Source query.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>First record from query results or <c>default(TSource)</c> for empty resultset.</returns>
        </member>
        <member name="M:LinqToDB.EntityFrameworkCore.EFForEFExtensions.SingleOrDefaultAsyncEF``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously loads first record from query, filtered using provided predicate.
            Returns <c>default(TSource)</c>, if query doesn't return any records.
            Throws exception, if query returns more than one record.
            </summary>
            <typeparam name="TSource">Query element type.</typeparam>
            <param name="source">Source query.</param>
            <param name="predicate">Query filter predicate.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>First record from query results or <c>default(TSource)</c> for empty resultset.</returns>
        </member>
        <member name="T:LinqToDB.EntityFrameworkCore.LinqToDBForEFTools">
            <summary>
            EF.Core <see cref="T:Microsoft.EntityFrameworkCore.DbContext"/> extensions to call LINQ To DB functionality.
            </summary>
        </member>
        <member name="M:LinqToDB.EntityFrameworkCore.LinqToDBForEFTools.BulkCopy``1(Microsoft.EntityFrameworkCore.DbContext,LinqToDB.Data.BulkCopyOptions,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Performs bulk insert operation.
            </summary>
            <typeparam name="T">Mapping type of inserted record.</typeparam>
            <param name="context">Database context.</param>
            <param name="options">Operation options.</param>
            <param name="source">Records to insert.</param>
            <returns>Bulk insert operation status.</returns>
        </member>
        <member name="M:LinqToDB.EntityFrameworkCore.LinqToDBForEFTools.BulkCopy``1(Microsoft.EntityFrameworkCore.DbContext,System.Int32,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Performs bulk insert operation.
            </summary>
            <typeparam name="T">Mapping type of inserted record.</typeparam>
            <param name="context">Database context.</param>
            <param name="maxBatchSize">Number of rows in each batch. At the end of each batch, the rows in the batch are sent to the server. </param>
            <param name="source">Records to insert.</param>
            <returns>Bulk insert operation status.</returns>
        </member>
        <member name="M:LinqToDB.EntityFrameworkCore.LinqToDBForEFTools.BulkCopy``1(Microsoft.EntityFrameworkCore.DbContext,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Performs bulk insert operation.
            </summary>
            <typeparam name="T">Mapping type of inserted record.</typeparam>
            <param name="context">Database context.</param>
            <param name="source">Records to insert.</param>
            <returns>Bulk insert operation status.</returns>
        </member>
        <member name="M:LinqToDB.EntityFrameworkCore.LinqToDBForEFTools.Into``1(Microsoft.EntityFrameworkCore.DbContext,LinqToDB.ITable{``0})">
            <summary>
            Starts LINQ query definition for insert operation.
            </summary>
            <typeparam name="T">Target table mapping class.</typeparam>
            <param name="context">Database context.</param>
            <param name="target">Target table.</param>
            <returns>Insertable source query.</returns>
        </member>
        <member name="M:LinqToDB.EntityFrameworkCore.LinqToDBForEFTools.GetTable``1(Microsoft.EntityFrameworkCore.DbContext)">
            <summary>
            Returns queryable source for specified mapping class for current DBContext, mapped to database table or view.
            </summary>
            <typeparam name="T">Mapping class type.</typeparam>
            <returns>Queryable source.</returns>
        </member>
        <member name="M:LinqToDB.EntityFrameworkCore.LinqToDBForEFTools.Initialize">
            <summary>
            Initializes integration of LINQ To DB with EF.Core.
            </summary>
        </member>
        <member name="P:LinqToDB.EntityFrameworkCore.LinqToDBForEFTools.Implementation">
            <summary>
            Gets or sets EF.Core to LINQ To DB integration bridge implementation.
            </summary>
        </member>
        <member name="M:LinqToDB.EntityFrameworkCore.LinqToDBForEFTools.ClearCaches">
            <summary>
            Clears internal caches
            </summary>
        </member>
        <member name="M:LinqToDB.EntityFrameworkCore.LinqToDBForEFTools.GetMetadataReader(Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Query.RelationalSqlTranslatingExpressionVisitorDependencies,Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource)">
            <summary>
            Creates or return existing metadata provider for provided EF.Core data model. If model is null, empty metadata
            provider will be returned.
            </summary>
            <param name="model">EF.Core data model instance. Could be <c>null</c>.</param>
            <param name="dependencies"></param>
            <returns>LINQ To DB metadata provider.</returns>
        </member>
        <member name="M:LinqToDB.EntityFrameworkCore.LinqToDBForEFTools.GetContextOptions(Microsoft.EntityFrameworkCore.DbContext)">
            <summary>
            Returns EF.Core <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions"/> for specific <see cref="T:Microsoft.EntityFrameworkCore.DbContext"/> instance.
            </summary>
            <param name="context">EF.Core <see cref="T:Microsoft.EntityFrameworkCore.DbContext"/> instance.</param>
            <returns><see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions"/> instance.</returns>
        </member>
        <member name="M:LinqToDB.EntityFrameworkCore.LinqToDBForEFTools.GetEFProviderInfo(Microsoft.EntityFrameworkCore.DbContext)">
            <summary>
            Returns EF.Core database provider information for specific <see cref="T:Microsoft.EntityFrameworkCore.DbContext"/> instance.
            </summary>
            <param name="context">EF.Core <see cref="T:Microsoft.EntityFrameworkCore.DbContext"/> instance.</param>
            <returns>EF.Core provider information.</returns>
        </member>
        <member name="M:LinqToDB.EntityFrameworkCore.LinqToDBForEFTools.GetEFProviderInfo(System.Data.Common.DbConnection)">
            <summary>
            Returns EF.Core database provider information for specific <see cref="T:System.Data.Common.DbConnection"/> instance.
            </summary>
            <param name="connection">EF.Core <see cref="T:System.Data.Common.DbConnection"/> instance.</param>
            <returns>EF.Core provider information.</returns>
        </member>
        <member name="M:LinqToDB.EntityFrameworkCore.LinqToDBForEFTools.GetEFProviderInfo(Microsoft.EntityFrameworkCore.DbContextOptions)">
            <summary>
            Returns EF.Core database provider information for specific <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions"/> instance.
            </summary>
            <param name="options">EF.Core <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions"/> instance.</param>
            <returns>EF.Core provider information.</returns>
        </member>
        <member name="M:LinqToDB.EntityFrameworkCore.LinqToDBForEFTools.GetDataProvider(LinqToDB.EntityFrameworkCore.EFProviderInfo,LinqToDB.EntityFrameworkCore.EFConnectionInfo)">
            <summary>
            Returns LINQ To DB provider, based on provider data from EF.Core.
            </summary>
            <param name="info">EF.Core provider information.</param>
            <param name="connectionInfo">Database connection information.</param>
            <returns>LINQ TO DB provider instance.</returns>
        </member>
        <member name="M:LinqToDB.EntityFrameworkCore.LinqToDBForEFTools.GetMappingSchema(Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Query.RelationalSqlTranslatingExpressionVisitorDependencies,Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource)">
            <summary>
            Creates mapping schema using provided EF.Core data model.
            </summary>
            <param name="model">EF.Core data model.</param>
            <param name="dependencies"></param>
            <param name="mappingSource"></param>
            <returns>Mapping schema for provided EF.Core model.</returns>
        </member>
        <member name="M:LinqToDB.EntityFrameworkCore.LinqToDBForEFTools.TransformExpression(System.Linq.Expressions.Expression,LinqToDB.IDataContext,Microsoft.EntityFrameworkCore.Metadata.IModel)">
            <summary>
            Transforms EF.Core expression tree to LINQ To DB expression.
            </summary>
            <param name="expression">EF.Core expression tree.</param>
            <param name="dc">LINQ To DB <see cref="T:LinqToDB.IDataContext"/> instance.</param>
            <param name="model">EF.Core data model instance.</param>
            <returns>Transformed expression.</returns>
        </member>
        <member name="M:LinqToDB.EntityFrameworkCore.LinqToDBForEFTools.CreateLinqToDbConnection(Microsoft.EntityFrameworkCore.DbContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)">
            <summary>
            Creates LINQ To DB <see cref="T:LinqToDB.Data.DataConnection"/> instance, attached to provided
            EF.Core <see cref="T:Microsoft.EntityFrameworkCore.DbContext"/> instance connection and transaction.
            </summary>
            <param name="context">EF.Core <see cref="T:Microsoft.EntityFrameworkCore.DbContext"/> instance.</param>
            <param name="transaction">Optional transaction instance, to which created connection should be attached.
            If not specified, will use current <see cref="T:Microsoft.EntityFrameworkCore.DbContext"/> transaction if it available.</param>
            <returns>LINQ To DB <see cref="T:LinqToDB.Data.DataConnection"/> instance.</returns>
        </member>
        <member name="M:LinqToDB.EntityFrameworkCore.LinqToDBForEFTools.CreateLinq2DbConnectionDetached(Microsoft.EntityFrameworkCore.DbContext)">
            <summary>
            Creates LINQ To DB <see cref="T:LinqToDB.Data.DataConnection"/> instance that creates new database connection using connection
            information from EF.Core <see cref="T:Microsoft.EntityFrameworkCore.DbContext"/> instance.
            </summary>
            <param name="context">EF.Core <see cref="T:Microsoft.EntityFrameworkCore.DbContext"/> instance.</param>
            <returns>LINQ To DB <see cref="T:LinqToDB.Data.DataConnection"/> instance.</returns>
        </member>
        <member name="M:LinqToDB.EntityFrameworkCore.LinqToDBForEFTools.GetConnectionInfo(LinqToDB.EntityFrameworkCore.EFProviderInfo)">
            <summary>
            Extracts database connection information from EF.Core provider data.
            </summary>
            <param name="info">EF.Core database provider data.</param>
            <returns>Database connection information.</returns>
        </member>
        <member name="M:LinqToDB.EntityFrameworkCore.LinqToDBForEFTools.GetModel(Microsoft.EntityFrameworkCore.DbContextOptions)">
            <summary>
            Extracts EF.Core data model instance from <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions"/>.
            </summary>
            <param name="options"><see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions"/> instance.</param>
            <returns>EF.Core data model instance.</returns>
        </member>
        <member name="M:LinqToDB.EntityFrameworkCore.LinqToDBForEFTools.CreateLinqToDbConnection(Microsoft.EntityFrameworkCore.DbContextOptions)">
            <summary>
            Creates new LINQ To DB <see cref="T:LinqToDB.Data.DataConnection"/> instance using connectivity information from
            EF.Core <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions"/> instance.
            </summary>
            <param name="options">EF.Core <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions"/> instance.</param>
            <returns>New LINQ To DB <see cref="T:LinqToDB.Data.DataConnection"/> instance.</returns>
        </member>
        <member name="M:LinqToDB.EntityFrameworkCore.LinqToDBForEFTools.ToLinqToDB``1(System.Linq.IQueryable{``0},LinqToDB.IDataContext)">
            <summary>
            Converts EF.Core's query to LINQ To DB query and attach it to provided LINQ To DB <see cref="T:LinqToDB.IDataContext"/>.
            </summary>
            <typeparam name="T">Entity type.</typeparam>
            <param name="query">EF.Core query.</param>
            <param name="dc">LINQ To DB <see cref="T:LinqToDB.IDataContext"/> to use with provided query.</param>
            <returns>LINQ To DB query, attached to provided <see cref="T:LinqToDB.IDataContext"/>.</returns>
        </member>
        <member name="M:LinqToDB.EntityFrameworkCore.LinqToDBForEFTools.ToLinqToDB``1(System.Linq.IQueryable{``0})">
            <summary>
            Converts EF.Core's query to LINQ To DB query and attach it to current EF.Core connection.
            </summary>
            <typeparam name="T">Entity type.</typeparam>
            <param name="query">EF.Core query.</param>
            <returns>LINQ To DB query, attached to current EF.Core connection.</returns>
        </member>
        <member name="M:LinqToDB.EntityFrameworkCore.LinqToDBForEFTools.GetCurrentContext(System.Linq.IQueryable)">
            <summary>
            Extracts <see cref="T:Microsoft.EntityFrameworkCore.DbContext"/> instance from <see cref="T:System.Linq.IQueryable"/> object.
            </summary>
            <param name="query">EF.Core query.</param>
            <returns>Current <see cref="T:Microsoft.EntityFrameworkCore.DbContext"/> instance.</returns>
        </member>
        <member name="M:LinqToDB.EntityFrameworkCore.LinqToDBForEFTools.ToLinqToDBTable``1(Microsoft.EntityFrameworkCore.DbSet{``0})">
            <summary>
            Converts EF.Core <see cref="T:Microsoft.EntityFrameworkCore.DbSet`1"/> instance to LINQ To DB <see cref="T:LinqToDB.ITable`1"/> instance.
            </summary>
            <typeparam name="T">Mapping entity type.</typeparam>
            <param name="dbSet">EF.Core <see cref="T:Microsoft.EntityFrameworkCore.DbSet`1"/> instance.</param>
            <returns>LINQ To DB <see cref="T:LinqToDB.ITable`1"/> instance.</returns>
        </member>
        <member name="M:LinqToDB.EntityFrameworkCore.LinqToDBForEFTools.ToLinqToDBTable``1(Microsoft.EntityFrameworkCore.DbSet{``0},LinqToDB.IDataContext)">
            <summary>
            Converts EF.Core <see cref="T:Microsoft.EntityFrameworkCore.DbSet`1"/> instance to LINQ To DB <see cref="T:LinqToDB.ITable`1"/> instance
            using existing LINQ To DB <see cref="T:LinqToDB.IDataContext"/> instance.
            </summary>
            <typeparam name="T">Mapping entity type.</typeparam>
            <param name="dbSet">EF.Core <see cref="T:Microsoft.EntityFrameworkCore.DbSet`1"/> instance.</param>
            <param name="dataContext">LINQ To DB data context instance.</param>
            <returns>LINQ To DB <see cref="T:LinqToDB.ITable`1"/> instance.</returns>
        </member>
        <member name="M:LinqToDB.EntityFrameworkCore.LinqToDBForEFTools.InitializeSqlServerMapping">
            <summary>
            Initilaizes SQL Server's DbFunctions dynamically to avoid dependency
            </summary>
        </member>
        <member name="T:LinqToDB.EntityFrameworkCore.LinqToDBForEFToolsException">
            <summary>
            Exception class for EF.Core to LINQ To DB integration issues.
            </summary>
        </member>
        <member name="M:LinqToDB.EntityFrameworkCore.LinqToDBForEFToolsException.#ctor">
            <summary>
            Creates new instance of exception.
            </summary>
        </member>
        <member name="M:LinqToDB.EntityFrameworkCore.LinqToDBForEFToolsException.#ctor(System.String)">
            <summary>
            Creates new instance of exception.
            </summary>
            <param name="message">Exception message.</param>
        </member>
        <member name="M:LinqToDB.EntityFrameworkCore.LinqToDBForEFToolsException.#ctor(System.String,System.Exception)">
            <summary>
            Creates new instance of exception when it generated for other exception.
            </summary>
            <param name="message">Exception message.</param>
            <param name="innerException">Original exception.</param>
        </member>
        <member name="T:LinqToDB.EntityFrameworkCore.LinqToDBForEFToolsImplDefault">
            <summary>
            Default EF.Core - LINQ To DB integration bridge implementation.
            </summary>
        </member>
        <member name="M:LinqToDB.EntityFrameworkCore.LinqToDBForEFToolsImplDefault.GetDataProvider(LinqToDB.EntityFrameworkCore.EFProviderInfo,LinqToDB.EntityFrameworkCore.EFConnectionInfo)">
            <summary>
            Returns LINQ To DB provider, based on provider data from EF.Core.
            Could be overriden if you have issues with default detection mechanisms.
            </summary>
            <param name="providerInfo">Provider information, extracted from EF.Core.</param>
            <param name="connectionInfo"></param>
            <returns>LINQ TO DB provider instance.</returns>
        </member>
        <member name="M:LinqToDB.EntityFrameworkCore.LinqToDBForEFToolsImplDefault.CreateMetadataReader(Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Query.RelationalSqlTranslatingExpressionVisitorDependencies,Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource)">
            <summary>
            Creates metadata provider for specified EF.Core data model. Default implementation uses
            <see cref="T:LinqToDB.EntityFrameworkCore.EFCoreMetadataReader"/> metadata provider.
            </summary>
            <param name="model">EF.Core data model.</param>
            <param name="dependencies"></param>
            <param name="mappingSource"></param>
            <returns>LINQ To DB metadata provider for specified EF.Core model.</returns>
        </member>
        <member name="M:LinqToDB.EntityFrameworkCore.LinqToDBForEFToolsImplDefault.GetMappingSchema(Microsoft.EntityFrameworkCore.Metadata.IModel,LinqToDB.Metadata.IMetadataReader)">
            <summary>
            Creates mapping schema using provided EF.Core data model and metadata provider.
            </summary>
            <param name="model">EF.Core data model.</param>
            <param name="metadataReader">Additional optional LINQ To DB database metadata provider.</param>
            <returns>Mapping schema for provided EF.Core model.</returns>
        </member>
        <member name="M:LinqToDB.EntityFrameworkCore.LinqToDBForEFToolsImplDefault.GetContextOptions(Microsoft.EntityFrameworkCore.DbContext)">
            <summary>
            Returns EF.Core <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions"/> for specific <see cref="T:Microsoft.EntityFrameworkCore.DbContext"/> instance.
            </summary>
            <param name="context">EF.Core <see cref="T:Microsoft.EntityFrameworkCore.DbContext"/> instance.</param>
            <returns><see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions"/> instance.</returns>
        </member>
        <member name="M:LinqToDB.EntityFrameworkCore.LinqToDBForEFToolsImplDefault.CompactExpression(System.Linq.Expressions.Expression)">
            <summary>
            Compacts expression to handle big filters.
            </summary>
            <param name="expression"></param>
            <returns>Compacted expression.</returns>
        </member>
        <member name="M:LinqToDB.EntityFrameworkCore.LinqToDBForEFToolsImplDefault.TransformExpression(System.Linq.Expressions.Expression,LinqToDB.IDataContext,Microsoft.EntityFrameworkCore.Metadata.IModel)">
            <summary>
            Transforms EF.Core expression tree to LINQ To DB expression.
            Method replaces EF.Core <see cref="T:Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1"/> instances with LINQ To DB
            <see cref="M:LinqToDB.DataExtensions.GetTable``1(LinqToDB.IDataContext)"/> calls.
            </summary>
            <param name="expression">EF.Core expression tree.</param>
            <param name="dc">LINQ To DB <see cref="T:LinqToDB.IDataContext"/> instance.</param>
            <param name="model">EF.Core data model instance.</param>
            <returns>Transformed expression.</returns>
        </member>
        <member name="M:LinqToDB.EntityFrameworkCore.LinqToDBForEFToolsImplDefault.GetCurrentContext(System.Linq.IQueryable)">
            <summary>
            Extracts <see cref="T:Microsoft.EntityFrameworkCore.DbContext"/> instance from <see cref="T:System.Linq.IQueryable"/> object.
            Due to unavailability of integration API in EF.Core this method use reflection and could became broken after EF.Core update.
            </summary>
            <param name="query">EF.Core query.</param>
            <returns>Current <see cref="T:Microsoft.EntityFrameworkCore.DbContext"/> instance.</returns>
        </member>
        <member name="M:LinqToDB.EntityFrameworkCore.LinqToDBForEFToolsImplDefault.ExtractConnectionInfo(Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions)">
            <summary>
            Extracts EF.Core connection information object from <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions"/>.
            </summary>
            <param name="options"><see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions"/> instance.</param>
            <returns>EF.Core connection data.</returns>
        </member>
        <member name="M:LinqToDB.EntityFrameworkCore.LinqToDBForEFToolsImplDefault.ExtractModel(Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions)">
            <summary>
            Extracts EF.Core data model instance from <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions"/>.
            </summary>
            <param name="options"><see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions"/> instance.</param>
            <returns>EF.Core data model instance.</returns>
        </member>
        <member name="P:LinqToDB.EntityFrameworkCore.LinqToDBForEFToolsImplDefault.SqlServerDefaultVersion">
            <summary>
            Gets or sets default provider version for SQL Server. Set to <see cref="F:LinqToDB.DataProvider.SqlServer.SqlServerVersion.v2008"/> dialect.
            </summary>
        </member>
        <member name="P:LinqToDB.EntityFrameworkCore.LinqToDBForEFToolsImplDefault.PostgreSqlDefaultVersion">
            <summary>
            Gets or sets default provider version for PostgreSQL Server. Set to <see cref="F:LinqToDB.DataProvider.PostgreSQL.PostgreSQLVersion.v93"/> dialect.
            </summary>
        </member>
        <member name="T:LinqToDB.EntityFrameworkCore.LinqToDBProviderInfo">
            <summary>
            Stores LINQ To DB database provider information.
            </summary>
        </member>
        <member name="P:LinqToDB.EntityFrameworkCore.LinqToDBProviderInfo.ProviderName">
            <summary>
            Gets or sets LINQ To DB provider name.
            <see cref="T:LinqToDB.ProviderName"/> for available providers.
            </summary>
        </member>
        <member name="M:LinqToDB.EntityFrameworkCore.LinqToDBProviderInfo.Merge(LinqToDB.EntityFrameworkCore.LinqToDBProviderInfo)">
            <summary>
            Replaces <c>null</c> values in current instance with values from parameter.
            </summary>
            <param name="providerInfo">Provider information to merge into current object.</param>
        </member>
        <member name="T:JetBrains.Annotations.NotNullAttribute">
            <summary>
            Indicates that the value of the marked element could never be <c>null</c>.
            </summary>
            <example><code>
            [NotNull] object Foo() {
              return null; // Warning: Possible 'null' assignment
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.UsedImplicitlyAttribute">
            <summary>
            Indicates that the marked symbol is used implicitly (e.g. via reflection, in external library),
            so this symbol will not be marked as unused (as well as by other usage inspections).
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.MeansImplicitUseAttribute">
            <summary>
            Should be used on attributes and causes ReSharper to not mark symbols marked with such attributes
            as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Access">
            <summary>Only entity marked with attribute considered used.</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Assign">
            <summary>Indicates implicit assignment to a member.</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type with fixed constructor signature.
            That means any unused constructor parameters won't be reported as such.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>Indicates implicit instantiation of a type.</summary>
        </member>
        <member name="T:JetBrains.Annotations.ImplicitUseTargetFlags">
            <summary>
            Specify what is considered used implicitly when marked
            with <see cref="T:JetBrains.Annotations.MeansImplicitUseAttribute"/> or <see cref="T:JetBrains.Annotations.UsedImplicitlyAttribute"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.Members">
            <summary>Members of entity marked with attribute are considered used.</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.WithMembers">
            <summary>Entity marked with attribute and all its members considered used.</summary>
        </member>
        <member name="T:JetBrains.Annotations.PublicAPIAttribute">
            <summary>
            This attribute is intended to mark publicly available API
            which should not be removed and so is treated as used.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.InstantHandleAttribute">
            <summary>
            Tells code analysis engine if the parameter is completely handled when the invoked method is on stack.
            If the parameter is a delegate, indicates that delegate is executed while the method is executed.
            If the parameter is an enumerable, indicates that it is enumerated while the method is executed.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.PureAttribute">
            <summary>
            Indicates that a method does not make any observable state changes.
            The same as <c>System.Diagnostics.Contracts.PureAttribute</c>.
            </summary>
            <example><code>
            [Pure] int Multiply(int x, int y) => x * y;
            
            void M() {
              Multiply(123, 42); // Waring: Return value of pure method is not used
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.LinqTunnelAttribute">
            <summary>
            Indicates that method is pure LINQ method, with postponed enumeration (like Enumerable.Select,
            .Where). This annotation allows inference of [InstantHandle] annotation for parameters
            of delegate type by analyzing LINQ method chains.
            </summary>
        </member>
    </members>
</doc>
